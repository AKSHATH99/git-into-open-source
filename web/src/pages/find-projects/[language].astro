---
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import fetch from 'node-fetch';
import { languages, repoTags } from './languages'
import RepoList from './RepoList.svelte';
import LanguageHeader from './LanguageHeader.svelte';

const { language } = Astro.params;

let repos = [];

const currentLanguage = languages.find((lang) => lang.identifier === language);

export async function getStaticPaths() {
  return languages.map((lang) => {
    return { params: { language: lang.identifier } }
  });
}

const API_KEY = process.env.GH_ACCESS_TOKEN;

// const fetchRepos = async () => {
//   // first-timers-only
//   const url = `https://api.github.com/search/repositories?q=language:${language}&sort=stars&order=desc`;
//   const data = fetch(url, { headers: { 'Authorization': `token ${API_KEY}`}} );
//   const result = await (await data).json();
//   return result?.items || [];
// };

const fetchRepos = async (language) => {
    if (!language || !API_KEY) {
        throw new Error("Both language and API_KEY are required.");
    }

    const TIMEOUT = 10000;
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), TIMEOUT);
    
    const fetchedRepos = new Set(); // to track unique repositories based on their ID
    const combinedRepos = [];

    for (const topic of repoTags) {
        const url = `https://api.github.com/search/repositories?q=language:${language}+topic:${topic}&sort=stars&order=desc`;
        
        try {
            const response = await fetch(url, {
                headers: {
                    'Authorization': `token ${API_KEY}`,
                    'Accept': 'application/vnd.github.mercy-preview+json'
                },
                signal: controller.signal
            });
            
            if (!response.ok) {
                throw new Error(`GitHub API returned status code ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            for (const repo of result?.items || []) {
                if (!fetchedRepos.has(repo.id)) { // check if we have seen this repo ID before
                    fetchedRepos.add(repo.id);
                    combinedRepos.push(repo);
                }
            }
        } catch (error) {
            if (error.name === 'AbortError') {
                throw new Error("Request timed out.");
            }
            throw error; // Re-throw other errors
        }
    }

    clearTimeout(timeoutId);

    // Sort the combined repos based on stars
    return combinedRepos.sort((a, b) => b.stargazers_count - a.stargazers_count);
};


repos = await fetchRepos(currentLanguage.identifier, process.env.GH_ACCESS_TOKEN);

---

<DefaultLayout name="Find a Project">
  <section class="wrapper">
    <a href="/find-projects" class="back">â†© Back</a>
    { language && 
    <>
      <LanguageHeader language={currentLanguage} />
      <RepoList repos={repos} />
    </>
    }
  </section>
</DefaultLayout>

<style lang="scss">
  .wrapper {
    max-width: 90vw;
    margin: 1rem auto;
    .back {
      color: var(--font-color-pale);
      border: 1px solid var(--font-color-pale);
      text-decoration: none;
      border-radius: 4px;
      padding: 0.1rem 0.25rem;
      margin-bottom: 0.5rem;
      display: block;
      width: fit-content;
      transition: 0.15s all ease-in-out;
      &:hover {
        background: var(--font-color-pale);
        color: var(--background);
      }
    }
  }

</style>
